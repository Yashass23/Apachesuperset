{"version":3,"file":"d1d6bf5b6cf5f9b0eddf.chunk.js","mappings":"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","sources":["webpack://superset/./src/components/AuditInfo/index.tsx","webpack://superset/./src/components/ImportModal/index.tsx","webpack://superset/./src/components/Tags/Tag.tsx","webpack://superset/./src/components/Tags/TagsList.tsx","webpack://superset/./src/features/dashboards/types.ts","webpack://superset/./src/pages/DashboardList/index.tsx","webpack://superset/./src/utils/getOwnerName.ts"],"sourcesContent":["import React from 'react';\n\nimport Owner from 'src/types/Owner';\nimport { Tooltip } from 'src/components/Tooltip';\nimport getOwnerName from 'src/utils/getOwnerName';\nimport { t } from '@superset-ui/core';\n\nexport type ModifiedInfoProps = {\n  user?: Owner;\n  date: string;\n};\n\nexport const ModifiedInfo = ({ user, date }: ModifiedInfoProps) => {\n  const dateSpan = (\n    <span className=\"no-wrap\" data-test=\"audit-info-date\">\n      {date}\n    </span>\n  );\n\n  if (user) {\n    const userName = getOwnerName(user);\n    const title = t('Modified by: %s', userName);\n    return (\n      <Tooltip title={title} placement=\"bottom\">\n        {dateSpan}\n      </Tooltip>\n    );\n  }\n  return dateSpan;\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n  sshTunnelPasswordFields?: string[];\n  setSSHTunnelPasswordFields?: (sshTunnelPasswordFields: string[]) => void;\n  sshTunnelPrivateKeyFields?: string[];\n  setSSHTunnelPrivateKeyFields?: (sshTunnelPrivateKeyFields: string[]) => void;\n  sshTunnelPrivateKeyPasswordFields?: string[];\n  setSSHTunnelPrivateKeyPasswordFields?: (\n    sshTunnelPrivateKeyPasswordFields: string[],\n  ) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n  sshTunnelPasswordFields = [],\n  setSSHTunnelPasswordFields = () => {},\n  sshTunnelPrivateKeyFields = [],\n  setSSHTunnelPrivateKeyFields = () => {},\n  sshTunnelPrivateKeyPasswordFields = [],\n  setSSHTunnelPrivateKeyPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] =\n    useState<Record<string, string>>({});\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: {\n      alreadyExists,\n      passwordsNeeded,\n      sshPasswordNeeded,\n      sshPrivateKeyNeeded,\n      sshPrivateKeyPasswordNeeded,\n    },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  useEffect(() => {\n    setSSHTunnelPasswordFields(sshPasswordNeeded);\n    if (sshPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPasswordNeeded, setSSHTunnelPasswordFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields(sshPrivateKeyNeeded);\n    if (sshPrivateKeyNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyNeeded, setSSHTunnelPrivateKeyFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields(sshPrivateKeyPasswordNeeded);\n    if (sshPrivateKeyPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyPasswordNeeded, setSSHTunnelPrivateKeyPasswordFields]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      sshTunnelPasswords,\n      sshTunnelPrivateKeys,\n      sshTunnelPrivateKeyPasswords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (\n      passwordFields.length === 0 &&\n      sshTunnelPasswordFields.length === 0 &&\n      sshTunnelPrivateKeyFields.length === 0 &&\n      sshTunnelPrivateKeyPasswordFields.length === 0\n    ) {\n      return null;\n    }\n\n    const files = [\n      ...new Set([\n        ...passwordFields,\n        ...sshTunnelPasswordFields,\n        ...sshTunnelPrivateKeyFields,\n        ...sshTunnelPrivateKeyPasswordFields,\n      ]),\n    ];\n\n    return (\n      <>\n        <h5>{t('Database passwords')}</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {files.map(fileName => (\n          <>\n            {passwordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`password-${fileName}`}\n                  autoComplete={`password-${fileName}`}\n                  type=\"password\"\n                  value={passwords[fileName]}\n                  onChange={event =>\n                    setPasswords({\n                      ...passwords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`ssh_tunnel_password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPasswords({\n                      ...sshTunnelPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_password\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <textarea\n                  name={`ssh_tunnel_private_key-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key-${fileName}`}\n                  value={sshTunnelPrivateKeys[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeys({\n                      ...sshTunnelPrivateKeys,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key_password-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_private_key_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPrivateKeyPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeyPasswords({\n                      ...sshTunnelPrivateKeyPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key_password\"\n                />\n              </StyledInputContainer>\n            )}\n          </>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>{t('Select file')}</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={\n            passwordFields.length > 0 ||\n            sshTunnelPasswordFields.length > 0 ||\n            sshTunnelPrivateKeyFields.length > 0 ||\n            sshTunnelPrivateKeyPasswordFields.length > 0\n          }\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { styled } from '@superset-ui/core';\nimport TagType from 'src/types/TagType';\nimport AntdTag from 'antd/lib/tag';\nimport React, { useMemo } from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\n\nconst StyledTag = styled(AntdTag)`\n  ${({ theme }) => `\n  margin-top: ${theme.gridUnit}px;\n  margin-bottom: ${theme.gridUnit}px;\n  font-size: ${theme.typography.sizes.s}px;\n  `};\n`;\n\nconst MAX_DISPLAY_CHAR = 20;\n\nconst Tag = ({\n  name,\n  id,\n  index = undefined,\n  onDelete = undefined,\n  editable = false,\n  onClick = undefined,\n  toolTipTitle = name,\n}: TagType) => {\n  const isLongTag = useMemo(() => name.length > MAX_DISPLAY_CHAR, [name]);\n  const tagDisplay = isLongTag ? `${name.slice(0, MAX_DISPLAY_CHAR)}...` : name;\n\n  const handleClose = () => (index ? onDelete?.(index) : null);\n\n  const tagElem = (\n    <>\n      {editable ? (\n        <Tooltip title={toolTipTitle} key={toolTipTitle}>\n          <StyledTag\n            key={id}\n            closable={editable}\n            onClose={handleClose}\n            color=\"blue\"\n          >\n            {tagDisplay}\n          </StyledTag>\n        </Tooltip>\n      ) : (\n        <Tooltip title={toolTipTitle} key={toolTipTitle}>\n          <StyledTag data-test=\"tag\" role=\"link\" key={id} onClick={onClick}>\n            {id ? (\n              <a\n                href={`/superset/all_entities/?id=${id}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                {tagDisplay}\n              </a>\n            ) : (\n              tagDisplay\n            )}\n          </StyledTag>\n        </Tooltip>\n      )}\n    </>\n  );\n\n  return tagElem;\n};\n\nexport default Tag;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useMemo, useState } from 'react';\nimport { styled } from '@superset-ui/core';\nimport TagType from 'src/types/TagType';\nimport Tag from './Tag';\n\nexport type TagsListProps = {\n  tags: TagType[];\n  editable?: boolean;\n  /**\n   * OnDelete:\n   * Only applies when editable is true\n   * Callback for when a tag is deleted\n   */\n  onDelete?: ((index: number) => void) | undefined;\n  maxTags?: number | undefined;\n};\n\nconst TagsDiv = styled.div`\n  max-width: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst TagsList = ({\n  tags,\n  editable = false,\n  onDelete,\n  maxTags,\n}: TagsListProps) => {\n  const [tempMaxTags, setTempMaxTags] = useState<number | undefined>(maxTags);\n\n  const handleDelete = (index: number) => {\n    onDelete?.(index);\n  };\n\n  const expand = () => setTempMaxTags(undefined);\n\n  const collapse = () => setTempMaxTags(maxTags);\n\n  const tagsIsLong: boolean | null = useMemo(\n    () => (tempMaxTags ? tags.length > tempMaxTags : null),\n    [tags.length, tempMaxTags],\n  );\n\n  const extraTags: number | null = useMemo(\n    () =>\n      typeof tempMaxTags === 'number' ? tags.length - tempMaxTags + 1 : null,\n    [tagsIsLong, tags.length, tempMaxTags],\n  );\n\n  return (\n    <TagsDiv className=\"tag-list\">\n      {tagsIsLong && typeof tempMaxTags === 'number' ? (\n        <>\n          {tags.slice(0, tempMaxTags - 1).map((tag: TagType, index) => (\n            <Tag\n              id={tag.id}\n              key={tag.id}\n              name={tag.name}\n              index={index}\n              onDelete={handleDelete}\n              editable={editable}\n            />\n          ))}\n          {tags.length > tempMaxTags ? (\n            <Tag\n              name={`+${extraTags}...`}\n              onClick={expand}\n              toolTipTitle={tags.map(t => t.name).join(', ')}\n            />\n          ) : null}\n        </>\n      ) : (\n        <>\n          {tags.map((tag: TagType, index) => (\n            <Tag\n              id={tag.id}\n              key={tag.id}\n              name={tag.name}\n              index={index}\n              onDelete={handleDelete}\n              editable={editable}\n            />\n          ))}\n          {maxTags ? (\n            tags.length > maxTags ? (\n              <Tag name=\"...\" onClick={collapse} />\n            ) : null\n          ) : null}\n        </>\n      )}\n    </TagsDiv>\n  );\n};\n\nexport default TagsList;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport type DashboardObject = {\n  dashboard_title: string;\n  description?: string;\n  css?: string;\n  slug?: string;\n  position?: string;\n  metadata?: string;\n};\n\nexport enum DashboardStatus {\n  PUBLISHED = 'published',\n  DRAFT = 'draft',\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  isFeatureEnabled,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport { useSelector } from 'react-redux';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport rison from 'rison';\nimport {\n  createFetchRelated,\n  createErrorHandler,\n  handleDashboardDelete,\n} from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { TagsList } from 'src/components/Tags';\nimport handleResourceExport from 'src/utils/export';\nimport Loading from 'src/components/Loading';\nimport SubMenu, { SubMenuProps } from 'src/features/home/SubMenu';\nimport ListView, {\n  ListViewProps,\n  Filter,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport Owner from 'src/types/Owner';\nimport Tag from 'src/types/TagType';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport FacePile from 'src/components/FacePile';\nimport Icons from 'src/components/Icons';\nimport DeleteModal from 'src/components/DeleteModal';\nimport FaveStar from 'src/components/FaveStar';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\n\nimport Dashboard from 'src/dashboard/containers/Dashboard';\nimport {\n  Dashboard as CRUDDashboard,\n  QueryObjectColumns,\n} from 'src/views/CRUD/types';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport { loadTags } from 'src/components/Tags/utils';\nimport DashboardCard from 'src/features/dashboards/DashboardCard';\nimport { DashboardStatus } from 'src/features/dashboards/types';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport { findPermission } from 'src/utils/findPermission';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the dashboards. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more dashboards that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface DashboardListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nexport interface Dashboard {\n  changed_by_name: string;\n  changed_on_delta_humanized: string;\n  changed_by: string;\n  dashboard_title: string;\n  id: number;\n  published: boolean;\n  url: string;\n  thumbnail_url: string;\n  owners: Owner[];\n  tags: Tag[];\n  created_by: object;\n}\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nfunction DashboardList(props: DashboardListProps) {\n  const { addDangerToast, addSuccessToast, user } = props;\n\n  const { roles } = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  const canReadTag = findPermission('can_read', 'Tag', roles);\n\n  const {\n    state: {\n      loading,\n      resourceCount: dashboardCount,\n      resourceCollection: dashboards,\n      bulkSelectEnabled,\n    },\n    setResourceCollection: setDashboards,\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dashboard>(\n    'dashboard',\n    t('dashboard'),\n    addDangerToast,\n  );\n  const dashboardIds = useMemo(() => dashboards.map(d => d.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'dashboard',\n    dashboardIds,\n    addDangerToast,\n  );\n\n  const [dashboardToEdit, setDashboardToEdit] = useState<Dashboard | null>(\n    null,\n  );\n  const [dashboardToDelete, setDashboardToDelete] =\n    useState<CRUDDashboard | null>(null);\n\n  const [importingDashboard, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n\n  const openDashboardImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDashboardImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDashboardImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dashboard imported'));\n  };\n\n  // TODO: Fix usage of localStorage keying on the user id\n  const userKey = dangerouslyGetItemDoNotUse(user?.userId?.toString(), null);\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  function openDashboardEditModal(dashboard: Dashboard) {\n    setDashboardToEdit(dashboard);\n  }\n\n  function handleDashboardEdit(edits: Dashboard) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${edits.id}`,\n    }).then(\n      ({ json = {} }) => {\n        setDashboards(\n          dashboards.map(dashboard => {\n            if (dashboard.id === json?.result?.id) {\n              const {\n                changed_by_name,\n                changed_by,\n                dashboard_title = '',\n                slug = '',\n                json_metadata = '',\n                changed_on_delta_humanized,\n                url = '',\n                certified_by = '',\n                certification_details = '',\n                owners,\n                tags,\n              } = json.result;\n              return {\n                ...dashboard,\n                changed_by_name,\n                changed_by,\n                dashboard_title,\n                slug,\n                json_metadata,\n                changed_on_delta_humanized,\n                url,\n                certified_by,\n                certification_details,\n                owners,\n                tags,\n              };\n            }\n            return dashboard;\n          }),\n        );\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('An error occurred while fetching dashboards: %s', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const handleBulkDashboardExport = (dashboardsToExport: Dashboard[]) => {\n    const ids = dashboardsToExport.map(({ id }) => id);\n    handleResourceExport('dashboard', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  function handleBulkDashboardDelete(dashboardsToDelete: Dashboard[]) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/dashboard/?q=${rison.encode(\n        dashboardsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected dashboards: ', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) =>\n          user?.userId && (\n            <FaveStar\n              itemId={id}\n              saveFaveStar={saveFavoriteStatus}\n              isStarred={favoriteStatus[id]}\n            />\n          ),\n        Header: '',\n        id: 'id',\n        disableSortBy: true,\n        size: 'xs',\n        hidden: !user?.userId,\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              url,\n              dashboard_title: dashboardTitle,\n              certified_by: certifiedBy,\n              certification_details: certificationDetails,\n            },\n          },\n        }: any) => (\n          <Link to={url}>\n            {certifiedBy && (\n              <>\n                <CertifiedBadge\n                  certifiedBy={certifiedBy}\n                  details={certificationDetails}\n                />{' '}\n              </>\n            )}\n            {dashboardTitle}\n          </Link>\n        ),\n        Header: t('Name'),\n        accessor: 'dashboard_title',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { status },\n          },\n        }: any) =>\n          status === DashboardStatus.PUBLISHED ? t('Published') : t('Draft'),\n        Header: t('Status'),\n        accessor: 'published',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { tags = [] },\n          },\n        }: {\n          row: {\n            original: {\n              tags: Tag[];\n            };\n          };\n        }) => (\n          // Only show custom type tags\n          <TagsList\n            tags={tags.filter(\n              (tag: Tag) => tag.type === 'TagTypes.custom' || tag.type === 1,\n            )}\n            maxTags={3}\n          />\n        ),\n        Header: t('Tags'),\n        accessor: 'tags',\n        disableSortBy: true,\n        hidden: !isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM),\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        accessor: 'owners',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              changed_on_delta_humanized: changedOn,\n              changed_by: changedBy,\n            },\n          },\n        }: any) => <ModifiedInfo date={changedOn} user={changedBy} />,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleDelete = () =>\n            handleDashboardDelete(\n              original,\n              refreshData,\n              addSuccessToast,\n              addDangerToast,\n            );\n          const handleEdit = () => openDashboardEditModal(original);\n          const handleExport = () => handleBulkDashboardExport([original]);\n\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={handleDelete}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash data-test=\"dashboard-list-trash-icon\" />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete && !canExport,\n        disableSortBy: true,\n      },\n      {\n        accessor: QueryObjectColumns.changed_by,\n        hidden: true,\n      },\n    ],\n    [\n      user?.userId,\n      canEdit,\n      canDelete,\n      canExport,\n      saveFavoriteStatus,\n      favoriteStatus,\n      refreshData,\n      addSuccessToast,\n      addDangerToast,\n    ],\n  );\n\n  const favoritesFilter: Filter = useMemo(\n    () => ({\n      Header: t('Favorite'),\n      key: 'favorite',\n      id: 'id',\n      urlDisplay: 'favorite',\n      input: 'select',\n      operator: FilterOperator.dashboardIsFav,\n      unfilteredLabel: t('Any'),\n      selects: [\n        { label: t('Yes'), value: true },\n        { label: t('No'), value: false },\n      ],\n    }),\n    [],\n  );\n\n  const filters: Filters = useMemo(() => {\n    const filters_list = [\n      {\n        Header: t('Name'),\n        key: 'search',\n        id: 'dashboard_title',\n        input: 'search',\n        operator: FilterOperator.titleOrSlug,\n      },\n      {\n        Header: t('Status'),\n        key: 'published',\n        id: 'published',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Published'), value: true },\n          { label: t('Draft'), value: false },\n        ],\n      },\n      ...(isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM) && canReadTag\n        ? [\n            {\n              Header: t('Tag'),\n              key: 'tags',\n              id: 'tags',\n              input: 'select',\n              operator: FilterOperator.dashboardTags,\n              unfilteredLabel: t('All'),\n              fetchSelects: loadTags,\n            },\n          ]\n        : []),\n      {\n        Header: t('Owner'),\n        key: 'owner',\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'owners',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dashboard owner values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      ...(user?.userId ? [favoritesFilter] : []),\n      {\n        Header: t('Certified'),\n        key: 'certified',\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.dashboardIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: t('Modified by'),\n        key: 'changed_by',\n        id: 'changed_by',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'changed_by',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset datasource values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n    ] as Filters;\n    return filters_list;\n  }, [addDangerToast, favoritesFilter, props.user]);\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'dashboard_title',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  const renderCard = useCallback(\n    (dashboard: Dashboard) => (\n      <DashboardCard\n        dashboard={dashboard}\n        hasPerm={hasPerm}\n        bulkSelectEnabled={bulkSelectEnabled}\n        showThumbnails={\n          userKey\n            ? userKey.thumbnails\n            : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n        }\n        userId={user?.userId}\n        loading={loading}\n        openDashboardEditModal={openDashboardEditModal}\n        saveFavoriteStatus={saveFavoriteStatus}\n        favoriteStatus={favoriteStatus[dashboard.id]}\n        handleBulkDashboardExport={handleBulkDashboardExport}\n        onDelete={dashboard => setDashboardToDelete(dashboard)}\n      />\n    ),\n    [\n      bulkSelectEnabled,\n      favoriteStatus,\n      hasPerm,\n      loading,\n      user?.userId,\n      saveFavoriteStatus,\n      userKey,\n    ],\n  );\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dashboard')}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      },\n    });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      subMenuButtons.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import dashboards')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openDashboardImportModal,\n      });\n    }\n  }\n  return (\n    <>\n      <SubMenu name={t('Dashboards')} buttons={subMenuButtons} />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected dashboards?',\n        )}\n        onConfirm={handleBulkDashboardDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDashboardExport,\n            });\n          }\n          return (\n            <>\n              {dashboardToEdit && (\n                <PropertiesModal\n                  dashboardId={dashboardToEdit.id}\n                  show\n                  onHide={() => setDashboardToEdit(null)}\n                  onSubmit={handleDashboardEdit}\n                />\n              )}\n              {dashboardToDelete && (\n                <DeleteModal\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{dashboardToDelete.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={() => {\n                    handleDashboardDelete(\n                      dashboardToDelete,\n                      refreshData,\n                      addSuccessToast,\n                      addDangerToast,\n                      undefined,\n                      user?.userId,\n                    );\n                    setDashboardToDelete(null);\n                  }}\n                  onHide={() => setDashboardToDelete(null)}\n                  open={!!dashboardToDelete}\n                  title={t('Please confirm')}\n                />\n              )}\n              <ListView<Dashboard>\n                bulkActions={bulkActions}\n                bulkSelectEnabled={bulkSelectEnabled}\n                cardSortSelectOptions={sortTypes}\n                className=\"dashboard-list-view\"\n                columns={columns}\n                count={dashboardCount}\n                data={dashboards}\n                disableBulkSelect={toggleBulkSelect}\n                fetchData={fetchData}\n                refreshData={refreshData}\n                filters={filters}\n                initialSort={initialSort}\n                loading={loading}\n                pageSize={PAGE_SIZE}\n                addSuccessToast={addSuccessToast}\n                addDangerToast={addDangerToast}\n                showThumbnails={\n                  userKey\n                    ? userKey.thumbnails\n                    : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n                }\n                renderCard={renderCard}\n                defaultViewMode={\n                  isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW)\n                    ? 'card'\n                    : 'table'\n                }\n                enableBulkTag\n                bulkTagResourceName=\"dashboard\"\n              />\n            </>\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dashboard\"\n        resourceLabel={t('dashboard')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDashboardImport}\n        show={importingDashboard}\n        onHide={closeDashboardImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(DashboardList);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Owner from 'src/types/Owner';\n\nexport default function getOwnerName(owner?: Owner): string {\n  if (!owner) {\n    return '';\n  }\n  return `${owner.first_name} ${owner.last_name}`;\n}\n"],"names":["ModifiedInfo","_ref","user","date","dateSpan","___EmotionJSX","className","userName","getOwnerName","title","t","Tooltip","placement","HelperMessage","styled","div","theme","colors","grayscale","base","_ref2","typography","sizes","s","StyledInputContainer","_ref3","gridUnit","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","light1","_ref10","_ref11","_ref12","light2","_ref13","_ref14","_ref15","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","isHidden","setIsHidden","useState","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","errorMessage","setErrorMessage","sshTunnelPasswords","setSSHTunnelPasswords","sshTunnelPrivateKeys","setSSHTunnelPrivateKeys","sshTunnelPrivateKeyPasswords","setSSHTunnelPrivateKeyPasswords","clearModal","state","alreadyExists","passwordsNeeded","sshPasswordNeeded","sshPrivateKeyNeeded","sshPrivateKeyPasswordNeeded","importResource","useImportResource","msg","useEffect","length","Modal","name","disablePrimaryButton","onHandledPrimaryAction","onUpload","_fileList$","originFileObj","File","then","result","hide","primaryButtonName","primaryButtonType","width","Upload","id","accept","onChange","info","file","status","onRemove","removedFile","filter","uid","customRequest","disabled","Button","loading","ErrorAlert","showDbInstallInstructions","renderPasswordFields","files","Set","React","map","fileName","indexOf","key","slice","autoComplete","type","value","event","target","_event$currentTarget$","_event$currentTarget","targetValue","currentTarget","toUpperCase","StyledTag","AntdTag","index","onDelete","editable","onClick","toolTipTitle","tagDisplay","useMemo","closable","onClose","handleClose","color","role","href","rel","TagsDiv","tags","maxTags","tempMaxTags","setTempMaxTags","handleDelete","tagsIsLong","extraTags","tag","Tag","expand","undefined","join","collapse","DashboardStatus","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","Actions","withToasts","props","_user$userId","addDangerToast","addSuccessToast","roles","useSelector","canReadTag","findPermission","resourceCount","dashboardCount","resourceCollection","dashboards","bulkSelectEnabled","setResourceCollection","setDashboards","hasPerm","fetchData","toggleBulkSelect","refreshData","useListViewResource","dashboardIds","d","saveFavoriteStatus","favoriteStatus","useFavoriteStatus","dashboardToEdit","setDashboardToEdit","dashboardToDelete","setDashboardToDelete","importingDashboard","showImportModal","preparingExport","setPreparingExport","userKey","dangerouslyGetItemDoNotUse","userId","toString","canCreate","canEdit","canDelete","canExport","isFeatureEnabled","FeatureFlag","VERSIONED_EXPORT","initialSort","desc","openDashboardEditModal","dashboard","handleDashboardEdit","edits","SupersetClient","get","endpoint","json","_json$result","changed_by_name","changed_by","dashboard_title","slug","json_metadata","changed_on_delta_humanized","url","certified_by","certification_details","owners","createErrorHandler","errMsg","handleBulkDashboardExport","dashboardsToExport","ids","handleResourceExport","columns","Cell","row","original","FaveStar","itemId","saveFaveStar","isStarred","Header","disableSortBy","size","hidden","dashboardTitle","certifiedBy","certificationDetails","Link","to","CertifiedBadge","details","accessor","PUBLISHED","TagsList","TAGGING_SYSTEM","FacePile","users","changedOn","changedBy","ConfirmStatusChange","description","onConfirm","handleDashboardDelete","confirmDelete","tabIndex","Icons","Trash","handleExport","Share","handleEdit","EditAlt","QueryObjectColumns","favoritesFilter","urlDisplay","input","operator","FilterOperator","dashboardIsFav","unfilteredLabel","selects","label","filters","titleOrSlug","equals","dashboardTags","fetchSelects","loadTags","relationManyMany","createFetchRelated","paginate","dashboardIsCertified","relationOneMany","sortTypes","renderCard","useCallback","DashboardCard","showThumbnails","thumbnails","THUMBNAILS","subMenuButtons","push","buttonStyle","window","location","assign","Import","openDashboardImportModal","SubMenu","buttons","dashboardsToDelete","delete","rison","message","bulkActions","onSelect","PropertiesModal","dashboardId","onSubmit","DeleteModal","open","ListView","cardSortSelectOptions","count","data","disableBulkSelect","pageSize","defaultViewMode","LISTVIEWS_DEFAULT_CARD_VIEW","enableBulkTag","bulkTagResourceName","ImportModelsModal","handleDashboardImport","closeDashboardImportModal","Loading","owner","first_name","last_name"],"sourceRoot":""}