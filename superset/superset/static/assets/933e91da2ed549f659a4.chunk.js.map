{"version":3,"file":"933e91da2ed549f659a4.chunk.js","mappings":"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","sources":["webpack://superset/./src/components/AuditInfo/index.tsx","webpack://superset/./src/components/ImportModal/index.tsx","webpack://superset/./src/components/ListView/ActionsBar.tsx","webpack://superset/./src/components/Tags/Tag.tsx","webpack://superset/./src/components/Tags/TagsList.tsx","webpack://superset/./src/features/home/commonMenuData.ts","webpack://superset/./src/features/queries/SyntaxHighlighterCopy.tsx","webpack://superset/./src/features/queries/hooks/useQueryPreviewState.ts","webpack://superset/./src/features/queries/SavedQueryPreviewModal.tsx","webpack://superset/./src/pages/SavedQueryList/index.tsx","webpack://superset/./src/utils/getOwnerName.ts"],"sourcesContent":["import React from 'react';\n\nimport Owner from 'src/types/Owner';\nimport { Tooltip } from 'src/components/Tooltip';\nimport getOwnerName from 'src/utils/getOwnerName';\nimport { t } from '@superset-ui/core';\n\nexport type ModifiedInfoProps = {\n  user?: Owner;\n  date: string;\n};\n\nexport const ModifiedInfo = ({ user, date }: ModifiedInfoProps) => {\n  const dateSpan = (\n    <span className=\"no-wrap\" data-test=\"audit-info-date\">\n      {date}\n    </span>\n  );\n\n  if (user) {\n    const userName = getOwnerName(user);\n    const title = t('Modified by: %s', userName);\n    return (\n      <Tooltip title={title} placement=\"bottom\">\n        {dateSpan}\n      </Tooltip>\n    );\n  }\n  return dateSpan;\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n  sshTunnelPasswordFields?: string[];\n  setSSHTunnelPasswordFields?: (sshTunnelPasswordFields: string[]) => void;\n  sshTunnelPrivateKeyFields?: string[];\n  setSSHTunnelPrivateKeyFields?: (sshTunnelPrivateKeyFields: string[]) => void;\n  sshTunnelPrivateKeyPasswordFields?: string[];\n  setSSHTunnelPrivateKeyPasswordFields?: (\n    sshTunnelPrivateKeyPasswordFields: string[],\n  ) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n  sshTunnelPasswordFields = [],\n  setSSHTunnelPasswordFields = () => {},\n  sshTunnelPrivateKeyFields = [],\n  setSSHTunnelPrivateKeyFields = () => {},\n  sshTunnelPrivateKeyPasswordFields = [],\n  setSSHTunnelPrivateKeyPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] =\n    useState<Record<string, string>>({});\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: {\n      alreadyExists,\n      passwordsNeeded,\n      sshPasswordNeeded,\n      sshPrivateKeyNeeded,\n      sshPrivateKeyPasswordNeeded,\n    },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  useEffect(() => {\n    setSSHTunnelPasswordFields(sshPasswordNeeded);\n    if (sshPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPasswordNeeded, setSSHTunnelPasswordFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields(sshPrivateKeyNeeded);\n    if (sshPrivateKeyNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyNeeded, setSSHTunnelPrivateKeyFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields(sshPrivateKeyPasswordNeeded);\n    if (sshPrivateKeyPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyPasswordNeeded, setSSHTunnelPrivateKeyPasswordFields]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      sshTunnelPasswords,\n      sshTunnelPrivateKeys,\n      sshTunnelPrivateKeyPasswords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (\n      passwordFields.length === 0 &&\n      sshTunnelPasswordFields.length === 0 &&\n      sshTunnelPrivateKeyFields.length === 0 &&\n      sshTunnelPrivateKeyPasswordFields.length === 0\n    ) {\n      return null;\n    }\n\n    const files = [\n      ...new Set([\n        ...passwordFields,\n        ...sshTunnelPasswordFields,\n        ...sshTunnelPrivateKeyFields,\n        ...sshTunnelPrivateKeyPasswordFields,\n      ]),\n    ];\n\n    return (\n      <>\n        <h5>{t('Database passwords')}</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {files.map(fileName => (\n          <>\n            {passwordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`password-${fileName}`}\n                  autoComplete={`password-${fileName}`}\n                  type=\"password\"\n                  value={passwords[fileName]}\n                  onChange={event =>\n                    setPasswords({\n                      ...passwords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`ssh_tunnel_password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPasswords({\n                      ...sshTunnelPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_password\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <textarea\n                  name={`ssh_tunnel_private_key-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key-${fileName}`}\n                  value={sshTunnelPrivateKeys[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeys({\n                      ...sshTunnelPrivateKeys,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key_password-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_private_key_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPrivateKeyPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeyPasswords({\n                      ...sshTunnelPrivateKeyPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key_password\"\n                />\n              </StyledInputContainer>\n            )}\n          </>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>{t('Select file')}</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={\n            passwordFields.length > 0 ||\n            sshTunnelPasswordFields.length > 0 ||\n            sshTunnelPrivateKeyFields.length > 0 ||\n            sshTunnelPrivateKeyPasswordFields.length > 0\n          }\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { TooltipPlacement } from 'antd/lib/tooltip';\n\nexport type ActionProps = {\n  label: string;\n  tooltip?: string | React.ReactElement;\n  placement?: TooltipPlacement;\n  icon: string;\n  onClick: () => void;\n};\n\ninterface ActionsBarProps {\n  actions: Array<ActionProps>;\n}\n\nconst StyledActions = styled.span`\n  white-space: nowrap;\n  min-width: 100px;\n  svg,\n  i {\n    margin-right: 8px;\n\n    &:hover {\n      path {\n        fill: ${({ theme }) => theme.colors.primary.base};\n      }\n    }\n  }\n`;\n\nconst ActionWrapper = styled.span`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nexport default function ActionsBar({ actions }: ActionsBarProps) {\n  return (\n    <StyledActions className=\"actions\">\n      {actions.map((action, index) => {\n        const ActionIcon = Icons[action.icon];\n        if (action.tooltip) {\n          return (\n            <Tooltip\n              id={`${action.label}-tooltip`}\n              title={action.tooltip}\n              placement={action.placement}\n              key={index}\n            >\n              <ActionWrapper\n                role=\"button\"\n                tabIndex={0}\n                className=\"action-button\"\n                data-test={action.label}\n                onClick={action.onClick}\n              >\n                <ActionIcon />\n              </ActionWrapper>\n            </Tooltip>\n          );\n        }\n\n        return (\n          <ActionWrapper\n            role=\"button\"\n            tabIndex={0}\n            className=\"action-button\"\n            onClick={action.onClick}\n            data-test={action.label}\n            key={index}\n          >\n            <ActionIcon />\n          </ActionWrapper>\n        );\n      })}\n    </StyledActions>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { styled } from '@superset-ui/core';\nimport TagType from 'src/types/TagType';\nimport AntdTag from 'antd/lib/tag';\nimport React, { useMemo } from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\n\nconst StyledTag = styled(AntdTag)`\n  ${({ theme }) => `\n  margin-top: ${theme.gridUnit}px;\n  margin-bottom: ${theme.gridUnit}px;\n  font-size: ${theme.typography.sizes.s}px;\n  `};\n`;\n\nconst MAX_DISPLAY_CHAR = 20;\n\nconst Tag = ({\n  name,\n  id,\n  index = undefined,\n  onDelete = undefined,\n  editable = false,\n  onClick = undefined,\n  toolTipTitle = name,\n}: TagType) => {\n  const isLongTag = useMemo(() => name.length > MAX_DISPLAY_CHAR, [name]);\n  const tagDisplay = isLongTag ? `${name.slice(0, MAX_DISPLAY_CHAR)}...` : name;\n\n  const handleClose = () => (index ? onDelete?.(index) : null);\n\n  const tagElem = (\n    <>\n      {editable ? (\n        <Tooltip title={toolTipTitle} key={toolTipTitle}>\n          <StyledTag\n            key={id}\n            closable={editable}\n            onClose={handleClose}\n            color=\"blue\"\n          >\n            {tagDisplay}\n          </StyledTag>\n        </Tooltip>\n      ) : (\n        <Tooltip title={toolTipTitle} key={toolTipTitle}>\n          <StyledTag data-test=\"tag\" role=\"link\" key={id} onClick={onClick}>\n            {id ? (\n              <a\n                href={`/superset/all_entities/?id=${id}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                {tagDisplay}\n              </a>\n            ) : (\n              tagDisplay\n            )}\n          </StyledTag>\n        </Tooltip>\n      )}\n    </>\n  );\n\n  return tagElem;\n};\n\nexport default Tag;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useMemo, useState } from 'react';\nimport { styled } from '@superset-ui/core';\nimport TagType from 'src/types/TagType';\nimport Tag from './Tag';\n\nexport type TagsListProps = {\n  tags: TagType[];\n  editable?: boolean;\n  /**\n   * OnDelete:\n   * Only applies when editable is true\n   * Callback for when a tag is deleted\n   */\n  onDelete?: ((index: number) => void) | undefined;\n  maxTags?: number | undefined;\n};\n\nconst TagsDiv = styled.div`\n  max-width: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst TagsList = ({\n  tags,\n  editable = false,\n  onDelete,\n  maxTags,\n}: TagsListProps) => {\n  const [tempMaxTags, setTempMaxTags] = useState<number | undefined>(maxTags);\n\n  const handleDelete = (index: number) => {\n    onDelete?.(index);\n  };\n\n  const expand = () => setTempMaxTags(undefined);\n\n  const collapse = () => setTempMaxTags(maxTags);\n\n  const tagsIsLong: boolean | null = useMemo(\n    () => (tempMaxTags ? tags.length > tempMaxTags : null),\n    [tags.length, tempMaxTags],\n  );\n\n  const extraTags: number | null = useMemo(\n    () =>\n      typeof tempMaxTags === 'number' ? tags.length - tempMaxTags + 1 : null,\n    [tagsIsLong, tags.length, tempMaxTags],\n  );\n\n  return (\n    <TagsDiv className=\"tag-list\">\n      {tagsIsLong && typeof tempMaxTags === 'number' ? (\n        <>\n          {tags.slice(0, tempMaxTags - 1).map((tag: TagType, index) => (\n            <Tag\n              id={tag.id}\n              key={tag.id}\n              name={tag.name}\n              index={index}\n              onDelete={handleDelete}\n              editable={editable}\n            />\n          ))}\n          {tags.length > tempMaxTags ? (\n            <Tag\n              name={`+${extraTags}...`}\n              onClick={expand}\n              toolTipTitle={tags.map(t => t.name).join(', ')}\n            />\n          ) : null}\n        </>\n      ) : (\n        <>\n          {tags.map((tag: TagType, index) => (\n            <Tag\n              id={tag.id}\n              key={tag.id}\n              name={tag.name}\n              index={index}\n              onDelete={handleDelete}\n              editable={editable}\n            />\n          ))}\n          {maxTags ? (\n            tags.length > maxTags ? (\n              <Tag name=\"...\" onClick={collapse} />\n            ) : null\n          ) : null}\n        </>\n      )}\n    </TagsDiv>\n  );\n};\n\nexport default TagsList;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nexport const commonMenuData = {\n  name: t('SQL'),\n  tabs: [\n    {\n      name: 'Saved queries',\n      label: t('Saved queries'),\n      url: '/savedqueryview/list/',\n      usesRouter: true,\n    },\n    {\n      name: 'Query history',\n      label: t('Query history'),\n      url: '/sqllab/history/',\n      usesRouter: true,\n    },\n  ],\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { SyntaxHighlighterProps } from 'react-syntax-highlighter';\nimport sqlSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/sql';\nimport htmlSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/htmlbars';\nimport markdownSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/markdown';\nimport jsonSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/json';\nimport github from 'react-syntax-highlighter/dist/cjs/styles/hljs/github';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/cjs/light';\nimport Icons from 'src/components/Icons';\nimport { ToastProps } from 'src/components/MessageToasts/withToasts';\nimport copyTextToClipboard from 'src/utils/copy';\n\nSyntaxHighlighter.registerLanguage('sql', sqlSyntax);\nSyntaxHighlighter.registerLanguage('markdown', markdownSyntax);\nSyntaxHighlighter.registerLanguage('html', htmlSyntax);\nSyntaxHighlighter.registerLanguage('json', jsonSyntax);\n\nconst SyntaxHighlighterWrapper = styled.div`\n  margin-top: -24px;\n\n  &:hover {\n    svg {\n      visibility: visible;\n    }\n  }\n\n  svg {\n    position: relative;\n    top: 40px;\n    left: 512px;\n    visibility: hidden;\n    margin: -4px;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n`;\n\nexport default function SyntaxHighlighterCopy({\n  addDangerToast,\n  addSuccessToast,\n  children,\n  ...syntaxHighlighterProps\n}: SyntaxHighlighterProps & {\n  children: string;\n  addDangerToast?: ToastProps['addDangerToast'];\n  addSuccessToast?: ToastProps['addSuccessToast'];\n  language: 'sql' | 'markdown' | 'html' | 'json';\n}) {\n  function copyToClipboard(textToCopy: string) {\n    copyTextToClipboard(() => Promise.resolve(textToCopy))\n      .then(() => {\n        if (addSuccessToast) {\n          addSuccessToast(t('SQL Copied!'));\n        }\n      })\n      .catch(() => {\n        if (addDangerToast) {\n          addDangerToast(t('Sorry, your browser does not support copying.'));\n        }\n      });\n  }\n  return (\n    <SyntaxHighlighterWrapper>\n      <Icons.Copy\n        tabIndex={0}\n        role=\"button\"\n        onClick={e => {\n          e.preventDefault();\n          e.currentTarget.blur();\n          copyToClipboard(children);\n        }}\n      />\n      <SyntaxHighlighter style={github} {...syntaxHighlighterProps}>\n        {children}\n      </SyntaxHighlighter>\n    </SyntaxHighlighterWrapper>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect } from 'react';\n\ntype BaseQueryObject = {\n  id: number;\n};\n\nexport default function useQueryPreviewState<D extends BaseQueryObject = any>({\n  queries,\n  fetchData,\n  currentQueryId,\n}: {\n  queries: D[];\n  fetchData: (id: number) => any;\n  currentQueryId: number;\n}) {\n  const index = queries.findIndex(query => query.id === currentQueryId);\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const [disablePrevious, setDisablePrevious] = useState(false);\n  const [disableNext, setDisableNext] = useState(false);\n\n  function checkIndex() {\n    setDisablePrevious(currentIndex === 0);\n    setDisableNext(currentIndex === queries.length - 1);\n  }\n\n  function handleDataChange(previous: boolean) {\n    const offset = previous ? -1 : 1;\n    const index = currentIndex + offset;\n    if (index >= 0 && index < queries.length) {\n      fetchData(queries[index].id);\n      setCurrentIndex(index);\n      checkIndex();\n    }\n  }\n\n  function handleKeyPress(ev: any) {\n    if (currentIndex >= 0 && currentIndex < queries.length) {\n      if (ev.key === 'ArrowDown' || ev.key === 'k') {\n        ev.preventDefault();\n        handleDataChange(false);\n      } else if (ev.key === 'ArrowUp' || ev.key === 'j') {\n        ev.preventDefault();\n        handleDataChange(true);\n      }\n    }\n  }\n\n  useEffect(() => {\n    checkIndex();\n  });\n\n  return {\n    handleKeyPress,\n    handleDataChange,\n    disablePrevious,\n    disableNext,\n  };\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport SyntaxHighlighterCopy from 'src/features/queries/SyntaxHighlighterCopy';\nimport withToasts, {\n  ToastProps,\n} from 'src/components/MessageToasts/withToasts';\nimport useQueryPreviewState from 'src/features/queries/hooks/useQueryPreviewState';\n\nconst QueryTitle = styled.div`\n  color: ${({ theme }) => theme.colors.secondary.light2};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  margin-bottom: 0;\n  text-transform: uppercase;\n`;\n\nconst QueryLabel = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n  font-size: ${({ theme }) => theme.typography.sizes.m}px;\n  padding: 4px 0 16px 0;\n`;\n\nconst StyledModal = styled(Modal)`\n  .ant-modal-content {\n  }\n\n  .ant-modal-body {\n    padding: 24px;\n  }\n\n  pre {\n    font-size: ${({ theme }) => theme.typography.sizes.xs}px;\n    font-weight: ${({ theme }) => theme.typography.weights.normal};\n    line-height: ${({ theme }) => theme.typography.sizes.l}px;\n    height: 375px;\n    border: none;\n  }\n`;\n\ntype SavedQueryObject = {\n  id: number;\n  label: string;\n  sql: string;\n};\n\ninterface SavedQueryPreviewModalProps extends ToastProps {\n  fetchData: (id: number) => {};\n  onHide: () => void;\n  openInSqlLab: (id: number, openInNewWindow: boolean) => {};\n  queries: Array<SavedQueryObject>;\n  savedQuery: SavedQueryObject;\n  show: boolean;\n}\n\nconst SavedQueryPreviewModal: FunctionComponent<SavedQueryPreviewModalProps> =\n  ({\n    fetchData,\n    onHide,\n    openInSqlLab,\n    queries,\n    savedQuery,\n    show,\n    addDangerToast,\n    addSuccessToast,\n  }) => {\n    const { handleKeyPress, handleDataChange, disablePrevious, disableNext } =\n      useQueryPreviewState<SavedQueryObject>({\n        queries,\n        currentQueryId: savedQuery.id,\n        fetchData,\n      });\n\n    return (\n      <div role=\"none\" onKeyUp={handleKeyPress}>\n        <StyledModal\n          onHide={onHide}\n          show={show}\n          title={t('Query preview')}\n          footer={\n            <>\n              <Button\n                data-test=\"previous-saved-query\"\n                key=\"previous-saved-query\"\n                disabled={disablePrevious}\n                onClick={() => handleDataChange(true)}\n              >\n                {t('Previous')}\n              </Button>\n              <Button\n                data-test=\"next-saved-query\"\n                key=\"next-saved-query\"\n                disabled={disableNext}\n                onClick={() => handleDataChange(false)}\n              >\n                {t('Next')}\n              </Button>\n              <Button\n                data-test=\"open-in-sql-lab\"\n                key=\"open-in-sql-lab\"\n                buttonStyle=\"primary\"\n                onClick={({ metaKey }) =>\n                  openInSqlLab(savedQuery.id, Boolean(metaKey))\n                }\n              >\n                {t('Open in SQL Lab')}\n              </Button>\n            </>\n          }\n        >\n          <QueryTitle>{t('Query name')}</QueryTitle>\n          <QueryLabel>{savedQuery.label}</QueryLabel>\n          <SyntaxHighlighterCopy\n            language=\"sql\"\n            addDangerToast={addDangerToast}\n            addSuccessToast={addSuccessToast}\n          >\n            {savedQuery.sql || ''}\n          </SyntaxHighlighterCopy>\n        </StyledModal>\n      </div>\n    );\n  };\n\nexport default withToasts(SavedQueryPreviewModal);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {\n  FeatureFlag,\n  isFeatureEnabled,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport rison from 'rison';\nimport {\n  createErrorHandler,\n  createFetchDistinct,\n  createFetchRelated,\n} from 'src/views/CRUD/utils';\nimport { useSelector } from 'react-redux';\nimport Popover from 'src/components/Popover';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport handleResourceExport from 'src/utils/export';\nimport SubMenu, { ButtonProps, SubMenuProps } from 'src/features/home/SubMenu';\nimport ListView, {\n  FilterOperator,\n  Filters,\n  ListViewProps,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ActionsBar, { ActionProps } from 'src/components/ListView/ActionsBar';\nimport { TagsList } from 'src/components/Tags';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { commonMenuData } from 'src/features/home/commonMenuData';\nimport { QueryObjectColumns, SavedQueryObject } from 'src/views/CRUD/types';\nimport copyTextToClipboard from 'src/utils/copy';\nimport Tag from 'src/types/TagType';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\nimport { loadTags } from 'src/components/Tags/utils';\nimport Icons from 'src/components/Icons';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport SavedQueryPreviewModal from 'src/features/queries/SavedQueryPreviewModal';\nimport { findPermission } from 'src/utils/findPermission';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the saved queries. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more saved queries that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface SavedQueryListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${({ theme }) => theme.colors.primary.base};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\n\nconst StyledPopoverItem = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n`;\n\nfunction SavedQueryList({\n  addDangerToast,\n  addSuccessToast,\n  user,\n}: SavedQueryListProps) {\n  const {\n    state: {\n      loading,\n      resourceCount: queryCount,\n      resourceCollection: queries,\n      bulkSelectEnabled,\n    },\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<SavedQueryObject>(\n    'saved_query',\n    t('Saved queries'),\n    addDangerToast,\n  );\n  const { roles } = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  const canReadTag = findPermission('can_read', 'Tag', roles);\n  const [queryCurrentlyDeleting, setQueryCurrentlyDeleting] =\n    useState<SavedQueryObject | null>(null);\n  const [savedQueryCurrentlyPreviewing, setSavedQueryCurrentlyPreviewing] =\n    useState<SavedQueryObject | null>(null);\n  const [importingSavedQuery, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n  const history = useHistory();\n\n  const openSavedQueryImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeSavedQueryImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleSavedQueryImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Query imported'));\n  };\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const handleSavedQueryPreview = useCallback(\n    (id: number) => {\n      SupersetClient.get({\n        endpoint: `/api/v1/saved_query/${id}`,\n      }).then(\n        ({ json = {} }) => {\n          setSavedQueryCurrentlyPreviewing({ ...json.result });\n        },\n        createErrorHandler(errMsg =>\n          addDangerToast(\n            t('There was an issue previewing the selected query %s', errMsg),\n          ),\n        ),\n      );\n    },\n    [addDangerToast],\n  );\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Saved queries',\n    ...commonMenuData,\n  };\n\n  const subMenuButtons: Array<ButtonProps> = [];\n\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n    });\n  }\n\n  subMenuButtons.push({\n    name: (\n      <Link to=\"/sqllab?new=true\">\n        <i className=\"fa fa-plus\" /> {t('Query')}\n      </Link>\n    ),\n    buttonStyle: 'primary',\n  });\n\n  if (canCreate && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n    subMenuButtons.push({\n      name: (\n        <Tooltip\n          id=\"import-tooltip\"\n          title={t('Import queries')}\n          placement=\"bottomRight\"\n          data-test=\"import-tooltip-test\"\n        >\n          <Icons.Import data-test=\"import-icon\" />\n        </Tooltip>\n      ),\n      buttonStyle: 'link',\n      onClick: openSavedQueryImportModal,\n      'data-test': 'import-button',\n    });\n  }\n\n  menuData.buttons = subMenuButtons;\n\n  // Action methods\n  const openInSqlLab = (id: number, openInNewWindow: boolean) => {\n    if (openInNewWindow) {\n      window.open(`/sqllab?savedQueryId=${id}`);\n    } else {\n      history.push(`/sqllab?savedQueryId=${id}`);\n    }\n  };\n\n  const copyQueryLink = useCallback(\n    (id: number) => {\n      copyTextToClipboard(() =>\n        Promise.resolve(`${window.location.origin}/sqllab?savedQueryId=${id}`),\n      )\n        .then(() => {\n          addSuccessToast(t('Link Copied!'));\n        })\n        .catch(() => {\n          addDangerToast(t('Sorry, your browser does not support copying.'));\n        });\n    },\n    [addDangerToast, addSuccessToast],\n  );\n\n  const handleQueryDelete = ({ id, label }: SavedQueryObject) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        setQueryCurrentlyDeleting(null);\n        addSuccessToast(t('Deleted: %s', label));\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(t('There was an issue deleting %s: %s', label, errMsg)),\n      ),\n    );\n  };\n\n  const handleBulkSavedQueryExport = (\n    savedQueriesToExport: SavedQueryObject[],\n  ) => {\n    const ids = savedQueriesToExport.map(({ id }) => id);\n    handleResourceExport('saved_query', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  const handleBulkQueryDelete = (queriesToDelete: SavedQueryObject[]) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/?q=${rison.encode(\n        queriesToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected queries: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(\n    () => [\n      {\n        accessor: 'label',\n        Header: t('Name'),\n      },\n      {\n        accessor: 'database.database_name',\n        Header: t('Database'),\n        size: 'xl',\n      },\n      {\n        accessor: 'database',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        accessor: 'schema',\n        Header: t('Schema'),\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { sql_tables: tables = [] },\n          },\n        }: any) => {\n          const names = tables.map((table: any) => table.table);\n          const main = names?.shift() || '';\n\n          if (names.length) {\n            return (\n              <StyledTableLabel>\n                <span>{main}</span>\n                <Popover\n                  placement=\"right\"\n                  title={t('TABLES')}\n                  trigger=\"click\"\n                  content={\n                    <>\n                      {names.map((name: string) => (\n                        <StyledPopoverItem key={name}>{name}</StyledPopoverItem>\n                      ))}\n                    </>\n                  }\n                >\n                  <span className=\"count\">(+{names.length})</span>\n                </Popover>\n              </StyledTableLabel>\n            );\n          }\n\n          return main;\n        },\n        accessor: 'sql_tables',\n        Header: t('Tables'),\n        size: 'xl',\n        disableSortBy: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { tags = [] },\n          },\n        }: any) => (\n          // Only show custom type tags\n          <TagsList tags={tags.filter((tag: Tag) => tag.type === 1)} />\n        ),\n        Header: t('Tags'),\n        accessor: 'tags',\n        disableSortBy: true,\n        hidden: !isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM),\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              changed_by: changedBy,\n              changed_on_delta_humanized: changedOn,\n            },\n          },\n        }: any) => <ModifiedInfo user={changedBy} date={changedOn} />,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handlePreview = () => {\n            handleSavedQueryPreview(original.id);\n          };\n          const handleEdit = ({ metaKey }: React.MouseEvent) =>\n            openInSqlLab(original.id, Boolean(metaKey));\n          const handleCopy = () => copyQueryLink(original.id);\n          const handleExport = () => handleBulkSavedQueryExport([original]);\n          const handleDelete = () => setQueryCurrentlyDeleting(original);\n\n          const actions = [\n            {\n              label: 'preview-action',\n              tooltip: t('Query preview'),\n              placement: 'bottom',\n              icon: 'Binoculars',\n              onClick: handlePreview,\n            },\n            canEdit && {\n              label: 'edit-action',\n              tooltip: t('Edit query'),\n              placement: 'bottom',\n              icon: 'Edit',\n              onClick: handleEdit,\n            },\n            {\n              label: 'copy-action',\n              tooltip: t('Copy query URL'),\n              placement: 'bottom',\n              icon: 'Copy',\n              onClick: handleCopy,\n            },\n            canExport && {\n              label: 'export-action',\n              tooltip: t('Export query'),\n              placement: 'bottom',\n              icon: 'Share',\n              onClick: handleExport,\n            },\n            canDelete && {\n              label: 'delete-action',\n              tooltip: t('Delete query'),\n              placement: 'bottom',\n              icon: 'Trash',\n              onClick: handleDelete,\n            },\n          ].filter(item => !!item);\n\n          return <ActionsBar actions={actions as ActionProps[]} />;\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        disableSortBy: true,\n      },\n      {\n        accessor: QueryObjectColumns.changed_by,\n        hidden: true,\n      },\n    ],\n    [canDelete, canEdit, canExport, copyQueryLink, handleSavedQueryPreview],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Name'),\n        id: 'label',\n        key: 'search',\n        input: 'search',\n        operator: FilterOperator.allText,\n      },\n      {\n        Header: t('Database'),\n        key: 'database',\n        id: 'database',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'saved_query',\n          'database',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dataset datasource values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Schema'),\n        id: 'schema',\n        key: 'schema',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchDistinct(\n          'saved_query',\n          'schema',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t('An error occurred while fetching schema values: %s', errMsg),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      ...((isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM) && canReadTag\n        ? [\n            {\n              Header: t('Tag'),\n              id: 'tags',\n              key: 'tags',\n              input: 'select',\n              operator: FilterOperator.savedQueryTags,\n              fetchSelects: loadTags,\n            },\n          ]\n        : []) as Filters),\n      {\n        Header: t('Modified by'),\n        key: 'changed_by',\n        id: 'changed_by',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'saved_query',\n          'changed_by',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset datasource values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n    ],\n    [addDangerToast],\n  );\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      {queryCurrentlyDeleting && (\n        <DeleteModal\n          description={t(\n            'This action will permanently delete the saved query.',\n          )}\n          onConfirm={() => {\n            if (queryCurrentlyDeleting) {\n              handleQueryDelete(queryCurrentlyDeleting);\n            }\n          }}\n          onHide={() => setQueryCurrentlyDeleting(null)}\n          open\n          title={t('Delete Query?')}\n        />\n      )}\n      {savedQueryCurrentlyPreviewing && (\n        <SavedQueryPreviewModal\n          fetchData={handleSavedQueryPreview}\n          onHide={() => setSavedQueryCurrentlyPreviewing(null)}\n          savedQuery={savedQueryCurrentlyPreviewing}\n          queries={queries}\n          openInSqlLab={openInSqlLab}\n          show\n        />\n      )}\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t('Are you sure you want to delete the selected queries?')}\n        onConfirm={handleBulkQueryDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              onSelect: confirmDelete,\n              type: 'danger',\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkSavedQueryExport,\n            });\n          }\n          return (\n            <ListView<SavedQueryObject>\n              className=\"saved_query-list-view\"\n              columns={columns}\n              count={queryCount}\n              data={queries}\n              fetchData={fetchData}\n              filters={filters}\n              initialSort={initialSort}\n              loading={loading}\n              pageSize={PAGE_SIZE}\n              bulkActions={bulkActions}\n              addSuccessToast={addSuccessToast}\n              addDangerToast={addDangerToast}\n              bulkSelectEnabled={bulkSelectEnabled}\n              disableBulkSelect={toggleBulkSelect}\n              highlightRowId={savedQueryCurrentlyPreviewing?.id}\n              enableBulkTag\n              bulkTagResourceName=\"query\"\n              refreshData={refreshData}\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"saved_query\"\n        resourceLabel={t('queries')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleSavedQueryImport}\n        show={importingSavedQuery}\n        onHide={closeSavedQueryImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(SavedQueryList);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Owner from 'src/types/Owner';\n\nexport default function getOwnerName(owner?: Owner): string {\n  if (!owner) {\n    return '';\n  }\n  return `${owner.first_name} ${owner.last_name}`;\n}\n"],"names":["ModifiedInfo","_ref","user","date","dateSpan","___EmotionJSX","className","userName","getOwnerName","title","t","Tooltip","placement","HelperMessage","styled","div","theme","colors","grayscale","base","_ref2","typography","sizes","s","StyledInputContainer","_ref3","gridUnit","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","light1","_ref10","_ref11","_ref12","light2","_ref13","_ref14","_ref15","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","isHidden","setIsHidden","useState","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","errorMessage","setErrorMessage","sshTunnelPasswords","setSSHTunnelPasswords","sshTunnelPrivateKeys","setSSHTunnelPrivateKeys","sshTunnelPrivateKeyPasswords","setSSHTunnelPrivateKeyPasswords","clearModal","state","alreadyExists","passwordsNeeded","sshPasswordNeeded","sshPrivateKeyNeeded","sshPrivateKeyPasswordNeeded","importResource","useImportResource","msg","useEffect","length","Modal","name","disablePrimaryButton","onHandledPrimaryAction","onUpload","_fileList$","originFileObj","File","then","result","hide","primaryButtonName","primaryButtonType","width","Upload","id","accept","onChange","info","file","status","onRemove","removedFile","filter","uid","customRequest","disabled","Button","loading","ErrorAlert","showDbInstallInstructions","renderPasswordFields","files","Set","React","map","fileName","indexOf","key","slice","autoComplete","type","value","event","target","_event$currentTarget$","_event$currentTarget","targetValue","currentTarget","toUpperCase","StyledActions","span","primary","ActionWrapper","ActionsBar","actions","action","index","ActionIcon","Icons","icon","tooltip","label","role","tabIndex","onClick","StyledTag","AntdTag","onDelete","editable","toolTipTitle","tagDisplay","useMemo","closable","onClose","handleClose","color","href","rel","TagsDiv","tags","maxTags","tempMaxTags","setTempMaxTags","handleDelete","tagsIsLong","extraTags","tag","Tag","expand","undefined","join","collapse","commonMenuData","tabs","url","usesRouter","SyntaxHighlighter","registerLanguage","sqlSyntax","markdownSyntax","htmlSyntax","jsonSyntax","SyntaxHighlighterWrapper","SyntaxHighlighterCopy","addDangerToast","addSuccessToast","children","syntaxHighlighterProps","Copy","e","textToCopy","preventDefault","blur","copyTextToClipboard","Promise","resolve","catch","_extends","style","github","useQueryPreviewState","queries","fetchData","currentQueryId","findIndex","query","currentIndex","setCurrentIndex","disablePrevious","setDisablePrevious","disableNext","setDisableNext","checkIndex","handleDataChange","previous","handleKeyPress","ev","QueryTitle","secondary","QueryLabel","dark2","m","StyledModal","xs","weights","normal","l","withToasts","openInSqlLab","savedQuery","onKeyUp","footer","buttonStyle","metaKey","Boolean","language","sql","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","StyledTableLabel","StyledPopoverItem","resourceCount","queryCount","resourceCollection","bulkSelectEnabled","hasPerm","toggleBulkSelect","refreshData","useListViewResource","roles","useSelector","canReadTag","findPermission","queryCurrentlyDeleting","setQueryCurrentlyDeleting","savedQueryCurrentlyPreviewing","setSavedQueryCurrentlyPreviewing","importingSavedQuery","showImportModal","preparingExport","setPreparingExport","history","useHistory","canCreate","canEdit","canDelete","canExport","isFeatureEnabled","FeatureFlag","VERSIONED_EXPORT","handleSavedQueryPreview","useCallback","SupersetClient","get","endpoint","json","createErrorHandler","errMsg","menuData","activeChild","subMenuButtons","push","Link","to","Import","openSavedQueryImportModal","buttons","openInNewWindow","window","open","copyQueryLink","location","origin","handleBulkSavedQueryExport","savedQueriesToExport","ids","handleResourceExport","initialSort","desc","columns","accessor","Header","size","hidden","disableSortBy","Cell","row","original","sql_tables","tables","names","table","main","shift","Popover","trigger","content","TagsList","TAGGING_SYSTEM","changed_by","changedBy","changed_on_delta_humanized","changedOn","handlePreview","handleCopy","handleExport","item","QueryObjectColumns","filters","input","operator","FilterOperator","allText","relationOneMany","unfilteredLabel","fetchSelects","createFetchRelated","paginate","equals","createFetchDistinct","savedQueryTags","loadTags","SubMenu","DeleteModal","description","onConfirm","handleQueryDelete","delete","SavedQueryPreviewModal","ConfirmStatusChange","queriesToDelete","rison","message","confirmDelete","bulkActions","onSelect","ListView","count","data","pageSize","disableBulkSelect","highlightRowId","enableBulkTag","bulkTagResourceName","ImportModelsModal","handleSavedQueryImport","closeSavedQueryImportModal","Loading","owner","first_name","last_name"],"sourceRoot":""}